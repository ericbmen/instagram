#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de OSINT para investigação de perfis do Instagram.
Este script foi corrigido e aprimorado para extrair informações públicas de perfis do Instagram
utilizando um ID de sessão válido.

Versão: 1.1 (Corrigida e Refatorada)
"""

import requests
import json
import csv
import argparse
import sys
import os
import time
from urllib.parse import quote_plus
from datetime import datetime

class Cores:
    """Classe para definir cores de saída no terminal."""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class InstagramInvestigatorCLI:
    """Classe principal da aplicação de linha de comando."""
    def __init__(self):
        self.current_data = None

    def print_banner(self):
        """Exibe o banner da aplicação."""
        banner = f"""
{Cores.HEADER}{Cores.BOLD}
╔══════════════════════════════════════════════════════════════════════╗
║                                                                      ║
║                       Instagram OSINT Investigator                     ║
║         Ferramenta de investigação para perfis do Instagram          ║
║                                                                      ║
╚══════════════════════════════════════════════════════════════════════╝
{Cores.ENDC}
"""
        print(banner)

    def print_tutorial(self):
        """Exibe o tutorial para obter o ID de sessão."""
        tutorial = f"""
{Cores.OKCYAN}{Cores.BOLD}📋 Como obter o 'sessionid' do Instagram:{Cores.ENDC}
{Cores.OKBLUE}1.{Cores.ENDC} Abra o Instagram no seu navegador (ex: Chrome, Firefox) e faça login.
{Cores.OKBLUE}2.{Cores.ENDC} Pressione F12 para abrir as Ferramentas de Desenvolvedor.
{Cores.OKBLUE}3.{Cores.ENDC} Vá para a aba "Application" (ou "Aplicação").
{Cores.OKBLUE}4.{Cores.ENDC} No menu lateral, expanda "Cookies" e clique em "https://www.instagram.com".
{Cores.OKBLUE}5.{Cores.ENDC} Na lista que aparecer, procure por "sessionid" na coluna "Name".
{Cores.OKBLUE}6.{Cores.ENDC} Copie o valor correspondente na coluna "Value".

{Cores.WARNING}⚠️ IMPORTANTE: Mantenha seu ID de sessão seguro e não o compartilhe com ninguém!{Cores.ENDC}
"""
        print(tutorial)

    def get_user_input(self):
        """Coleta os dados do usuário de forma interativa."""
        print(f"\n{Cores.BOLD}🔍 Dados para Investigação:{Cores.ENDC}")

        # Nome de usuário
        while True:
            username = input(f"{Cores.OKGREEN}👤 Nome de usuário do Instagram (sem @): {Cores.ENDC}").strip()
            if username:
                if username.startswith('@'):
                    username = username[1:]
                    print(f"{Cores.WARNING}   '@' removido automaticamente.{Cores.ENDC}")
                
                # Validação básica de caracteres permitidos no Instagram
                if all(c.isalnum() or c in '._' for c in username):
                    break
                else:
                    print(f"{Cores.FAIL}❌ Nome de usuário inválido! Use apenas letras, números, pontos (.) e sublinhados (_).{Cores.ENDC}")
            else:
                print(f"{Cores.FAIL}❌ Nome de usuário é obrigatório!{Cores.ENDC}")

        # ID da sessão
        while True:
            session_id = input(f"{Cores.OKGREEN}🔑 ID da sessão (sessionid): {Cores.ENDC}").strip()
            if session_id:
                break
            else:
                print(f"{Cores.FAIL}❌ Session ID é obrigatório!{Cores.ENDC}")
                
        return username, session_id

    def show_progress(self, message):
        """Mostra uma mensagem de progresso da operação."""
        print(f"{Cores.OKCYAN}⏳ {message}...{Cores.ENDC}")

    def show_success(self, message):
        """Mostra uma mensagem de sucesso."""
        print(f"{Cores.OKGREEN}✅ {message}{Cores.ENDC}")

    def show_error(self, message):
        """Mostra uma mensagem de erro."""
        print(f"{Cores.FAIL}❌ ERRO: {message}{Cores.ENDC}")

    def show_warning(self, message):
        """Mostra uma mensagem de aviso."""
        print(f"{Cores.WARNING}⚠️ AVISO: {message}{Cores.ENDC}")

    def get_user_id(self, username, session_id):
        """Obtém o ID do usuário a partir do nome de usuário."""
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36",
            "x-ig-app-id": "936619743392459"
        }
        url = f'https://i.instagram.com/api/v1/users/web_profile_info/?username={username}'
        
        try:
            response = requests.get(url, headers=headers, cookies={'sessionid': session_id}, timeout=30)
            
            if response.status_code == 404:
                return {"id": None, "error": "Usuário não encontrado."}
            if response.status_code == 429:
                return {"id": None, "error": "Limite de requisições atingido. Tente novamente mais tarde."}
            response.raise_for_status()

            data = response.json()
            user_id = data.get("data", {}).get("user", {}).get("id")
            if not user_id:
                return {"id": None, "error": "Não foi possível encontrar o ID do usuário na resposta da API."}
            
            return {"id": user_id, "error": None}
            
        except requests.exceptions.RequestException as e:
            return {"id": None, "error": f"Erro de rede: {e}"}
        except json.JSONDecodeError:
            return {"id": None, "error": "Resposta inválida da API (não é um JSON). Verifique seu sessionid."}
        except KeyError:
            return {"id": None, "error": "Formato de resposta inesperado da API."}

    def get_user_info(self, user_id, session_id):
        """Obtém informações detalhadas do usuário a partir do seu ID."""
        headers = {
            'User-Agent': 'Instagram 10.3.2 (iPhone7,2; iPhone OS 9_3_3; en_US; en-US) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13G34',
            "x-ig-app-id": "936619743392459"
        }
        url = f'https://i.instagram.com/api/v1/users/{user_id}/info/'
        
        try:
            response = requests.get(url, headers=headers, cookies={'sessionid': session_id}, timeout=30)

            if response.status_code == 429:
                return {"user": None, "error": "Limite de requisições atingido."}
            
            response.raise_for_status()
            data = response.json()
            
            user_info = data.get("user")
            if not user_info:
                return {"user": None, "error": "Chave 'user' não encontrada na resposta da API."}
                
            user_info["userID"] = user_id # Adiciona o ID para consistência
            return {"user": user_info, "error": None}
            
        except requests.exceptions.RequestException as e:
            return {"user": None, "error": f"Erro de rede: {e}"}
        except json.JSONDecodeError:
            return {"user": None, "error": "Resposta inválida da API (não é um JSON)."}

    def investigate_profile(self, username, session_id):
        """Executa a investigação completa do perfil."""
        try:
            # Passo 1: Obter ID do usuário
            self.show_progress(f"Obtendo ID do usuário para '{username}'")
            user_id_data = self.get_user_id(username, session_id)
            
            if user_id_data.get("error"):
                raise Exception(user_id_data["error"])
                
            user_id = user_id_data["id"]
            self.show_success(f"ID do usuário encontrado: {user_id}")
            
            time.sleep(1) # Pequeno atraso para evitar limitação de taxa
            
            # Passo 2: Obter informações detalhadas
            self.show_progress("Coletando informações detalhadas do perfil")
            info_data = self.get_user_info(user_id, session_id)
            
            if info_data.get("error"):
                raise Exception(info_data["error"])
                
            user_info = info_data["user"]
            self.show_success("Informações do perfil coletadas com sucesso")
            
            self.current_data = user_info
            return user_info
            
        except Exception as e:
            raise Exception(f"Falha na investigação: {e}")

    def display_results(self, data):
        """Exibe os resultados da investigação de forma organizada."""
        if not data:
            self.show_warning("Nenhum dado para exibir.")
            return

        print(f"\n{Cores.HEADER}{Cores.BOLD}{'=' * 70}")
        print(f"📊 RESULTADOS DA INVESTIGAÇÃO PARA: @{data.get('username', 'N/A')}")
        print(f"{'=' * 70}{Cores.ENDC}")
        
        # Informações básicas
        print(f"\n{Cores.BOLD}👤 INFORMAÇÕES BÁSICAS:{Cores.ENDC}")
        print(f"  Nome de Usuário: {Cores.OKGREEN}{data.get('username', 'N/A')}{Cores.ENDC}")
        print(f"  ID do Usuário: {Cores.OKGREEN}{data.get('userID', 'N/A')}{Cores.ENDC}")
        print(f"  Nome Completo: {Cores.OKGREEN}{data.get('full_name', 'N/A')}{Cores.ENDC}")
        print(f"  Verificado: {Cores.OKGREEN if data.get('is_verified') else Cores.FAIL}{'Sim' if data.get('is_verified') else 'Não'}{Cores.ENDC}")
        print(f"  Conta Business: {Cores.OKGREEN if data.get('is_business') else Cores.FAIL}{'Sim' if data.get('is_business') else 'Não'}{Cores.ENDC}")
        print(f"  Conta Privada: {Cores.FAIL if data.get('is_private') else Cores.OKGREEN}{'Sim' if data.get('is_private') else 'Não'}{Cores.ENDC}")
        
        # Estatísticas
        print(f"\n{Cores.BOLD}📈 ESTATÍSTICAS:{Cores.ENDC}")
        print(f"  Seguidores: {Cores.OKCYAN}{data.get('follower_count', 'N/A'):,}{Cores.ENDC}")
        print(f"  Seguindo: {Cores.OKCYAN}{data.get('following_count', 'N/A'):,}{Cores.ENDC}")
        print(f"  Postagens: {Cores.OKCYAN}{data.get('media_count', 'N/A'):,}{Cores.ENDC}")
        print(f"  Vídeos IGTV: {Cores.OKCYAN}{data.get('total_igtv_videos', 'N/A')}{Cores.ENDC}")
        
        # Informações de contato
        print(f"\n{Cores.BOLD}📞 INFORMAÇÕES DE CONTATO (se públicas):{Cores.ENDC}")
        if data.get('public_email'):
            print(f"  Email Público: {Cores.OKGREEN}{data['public_email']}{Cores.ENDC}")
        if data.get('public_phone_number'):
            phone = f"+{data.get('public_phone_country_code', '')} {data['public_phone_number']}"
            print(f"  Telefone Público: {Cores.OKGREEN}{phone.strip()}{Cores.ENDC}")
        
        # Outras informações
        print(f"\n{Cores.BOLD}🔗 OUTRAS INFORMAÇÕES:{Cores.ENDC}")
        if data.get('external_url'):
            print(f"  URL Externa: {Cores.OKCYAN}{data['external_url']}{Cores.ENDC}")
        if data.get('biography'):
            bio = data['biography'].replace('\n', ' ')
            print(f"  Biografia: {Cores.OKCYAN}{bio}{Cores.ENDC}")
        if data.get('hd_profile_pic_url_info', {}).get('url'):
            print(f"  URL da Foto de Perfil (HD): {Cores.OKCYAN}{data['hd_profile_pic_url_info']['url']}{Cores.ENDC}")
            
        print(f"\n{Cores.HEADER}{'=' * 70}")
        print(f"⏰ Investigação concluída em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"{'=' * 70}{Cores.ENDC}")

    def export_data(self, data, format_type, filename=None):
        """Exporta os dados em formato JSON ou CSV."""
        if not data:
            self.show_warning("Nenhum dado para exportar.")
            return None

        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            username = data.get('username', 'desconhecido')
            filename_base = f"instagram_{username}_{timestamp}"
        else:
            filename_base = filename

        try:
            if format_type.lower() == 'json':
                full_filename = f"{filename_base}.json"
                with open(full_filename, 'w', encoding='utf-8') as f:
                    json.dump(data, f, indent=4, ensure_ascii=False)
            
            elif format_type.lower() == 'csv':
                full_filename = f"{filename_base}.csv"
                # Aplaina o dicionário para facilitar a exportação para CSV
                flat_data = {k: v for k, v in data.items() if not isinstance(v, (dict, list))}
                
                with open(full_filename, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow(flat_data.keys())  # Cabeçalho
                    writer.writerow(flat_data.values()) # Dados
            else:
                self.show_error(f"Formato de exportação '{format_type}' não suportado.")
                return None

            self.show_success(f"Dados exportados com sucesso para: {os.path.abspath(full_filename)}")
            return full_filename

        except Exception as e:
            self.show_error(f"Erro ao exportar arquivo: {e}")
            return None

    def interactive_mode(self):
        """Executa o modo interativo da aplicação."""
        self.print_banner()
        
        while True:
            print(f"\n{Cores.BOLD}📌 MENU PRINCIPAL:{Cores.ENDC}")
            print(f"{Cores.OKBLUE}1.{Cores.ENDC} Nova investigação")
            print(f"{Cores.OKBLUE}2.{Cores.ENDC} Ver tutorial (como obter Session ID)")
            print(f"{Cores.OKBLUE}3.{Cores.ENDC} Exportar última investigação")
            print(f"{Cores.OKBLUE}4.{Cores.ENDC} Sair")
            
            choice = input(f"\n{Cores.OKGREEN}Escolha uma opção (1-4): {Cores.ENDC}").strip()
            
            if choice == '1':
                try:
                    username, session_id = self.get_user_input()
                    print(f"\n{Cores.BOLD}🔍 Iniciando investigação de: @{username}{Cores.ENDC}")
                    
                    data = self.investigate_profile(username, session_id)
                    self.display_results(data)
                    
                except Exception as e:
                    self.show_error(str(e))
            
            elif choice == '2':
                self.print_tutorial()
                
            elif choice == '3':
                if self.current_data:
                    format_choice = input(f"{Cores.OKGREEN}Formato de exportação (json/csv): {Cores.ENDC}").strip().lower()
                    if format_choice in ['json', 'csv']:
                        self.export_data(self.current_data, format_choice)
                    else:
                        self.show_error("Formato inválido! Use 'json' ou 'csv'.")
                else:
                    self.show_warning("Nenhuma investigação foi realizada nesta sessão para exportar.")
                    
            elif choice == '4':
                print(f"\n{Cores.OKGREEN}👋 Obrigado por usar o Instagram Investigator! Até mais.{Cores.ENDC}")
                break
                
            else:
                self.show_error("Opção inválida! Por favor, escolha um número entre 1 e 4.")

def main():
    """Função principal para analisar argumentos da linha de comando ou iniciar o modo interativo."""
    parser = argparse.ArgumentParser(
        description='Instagram Investigator - Ferramenta OSINT para perfis do Instagram.',
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('-u', '--username', help='Nome de usuário do Instagram (sem @)')
    parser.add_argument('-s', '--sessionid', help='ID da sessão (sessionid) do Instagram')
    parser.add_argument('-o', '--output', help='Nome do arquivo de saída (sem extensão)')
    parser.add_argument('-f', '--format', choices=['json', 'csv'], default='json', help='Formato de exportação (padrão: json)')
    parser.add_argument('--tutorial', action='store_true', help='Mostra o tutorial para obter o sessionid e sai')
    
    args = parser.parse_args()
    
    app = InstagramInvestigatorCLI()
    
    if args.tutorial:
        app.print_banner()
        app.print_tutorial()
        return
        
    if args.username and args.sessionid:
        # Modo de linha de comando direto
        app.print_banner()
        
        try:
            username = args.username.lstrip('@')
            print(f"\n{Cores.BOLD}🔍 Investigando: @{username}{Cores.ENDC}")
            
            data = app.investigate_profile(username, args.sessionid)
            app.display_results(data)
            
            if args.output:
                app.export_data(data, args.format, args.output)
            
        except Exception as e:
            app.show_error(str(e))
            sys.exit(1)
    else:
        # Modo interativo (se nenhum argumento for passado)
        app.interactive_mode()

if __name__ == "__main__":
    main()
